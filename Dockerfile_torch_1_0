ARG UBUNTU_VERSION=18.04
ARG ARCH=
ARG CUDA=10.2
ARG CUDNN=cudnn7-devel

FROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-${CUDNN}-ubuntu${UBUNTU_VERSION}
FROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-${CUDNN}-ubuntu${UBUNTU_VERSION} as base

# Install all OS dependencies for notebook server that starts but lacks all
# features (e.g., download as all possible file formats)
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update \
 && apt-get install -yq --no-install-recommends \
    wget \
    bzip2 \
    ca-certificates \
    sudo \
    locales \
    fonts-liberation \
    run-one \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen

# Configure environment
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8
ENV PATH=$CONDA_DIR/bin:$PATH

RUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc

RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    mkdir -p $CONDA_DIR && \
    chmod g+w /etc/passwd

WORKDIR /jupyter
ARG PYTHON_VERSION=3.7

# Install conda as jupyter and check the md5 sum provided on the download site
ENV MINICONDA_VERSION=py37_4.8.3 \
    MINICONDA_MD5=751786b92c00b1aeae3f017b781018df \
    CONDA_VERSION=latest

RUN cd /tmp && \
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "${MINICONDA_MD5} *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - && \
    /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
    rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "conda ${CONDA_VERSION}" >> $CONDA_DIR/conda-meta/pinned && \
    conda config --system --prepend channels conda-forge && \
    conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \
    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned && \
    conda install --quiet --yes conda && \
    conda install --quiet --yes pip && \
    conda update --all --quiet --yes && \
    conda clean --all -f -y

# Install Tini
RUN conda install --quiet --yes tini && \
    conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned && \
    conda clean --all -f -y

# Install Jupyter Notebook, Lab, and Hub
# Generate a notebook server config
# Cleanup temporary files
# Correct permissions
# Do all this in a single RUN command to avoid duplicating all of the
# files across image layers when the permissions change
RUN conda install --quiet --yes \
    notebook \
    jupyterhub \
    'jupyterlab=2.0.0' && \
    conda clean --all -f -y && \
    npm cache clean --force && \
    jupyter notebook --generate-config && \
    rm -rf $CONDA_DIR/share/jupyter/lab/staging

# Install all OS dependencies for fully functional notebook server
RUN apt-get update && apt-get install -yq --no-install-recommends \
    build-essential \
    emacs \
    git \
    inkscape \
    jed \
    libsm6 \
    libxext-dev \
    libxrender1 \
    lmodern \
    netcat \
    python-dev \
    # ---- nbconvert dependencies ----
    texlive-xetex \
    texlive-fonts-recommended \
    texlive-generic-recommended \
    # Optional dependency
    texlive-fonts-extra \
    # ----
    tzdata \
    unzip \
    nano \
    vim \
    curl \
    htop \
    cifs-utils \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# ffmpeg for matplotlib anim
RUN apt-get update && \
    apt-get install -y --no-install-recommends ffmpeg && \
    rm -rf /var/lib/apt/lists/*

# Install Python 3 packages
RUN conda install --quiet --yes \
    beautifulsoup4 \
    'conda-forge::blas=*=openblas' \
    bokeh \
    cloudpickle \
    cython \
    dask \
    dill \
    h5py \
    hdf5 \
    ipywidgets \
    matplotlib-base \
    numba \
    numexpr \
    pandas \
    patsy \
    protobuf \
    scikit-image \
    scikit-learn \
    scipy \
    seaborn \
    sqlalchemy \
    statsmodels \
    sympy \
    vincent \
    xlrd \
    && \
    conda clean --all -f -y && \
    # Activate ipywidgets extension in the environment that runs the notebook server
    jupyter nbextension enable --py widgetsnbextension --sys-prefix && \
    # Also activate ipywidgets extension for JupyterLab
    # Check this URL for most recent compatibilities
    # https://github.com/jupyter-widgets/ipywidgets/tree/master/packages/jupyterlab-manager
    jupyter labextension install @jupyter-widgets/jupyterlab-manager@2.0 --no-build && \
    jupyter labextension install @bokeh/jupyter_bokeh@2.0.0 --no-build && \
    jupyter lab build && \
    npm cache clean --force && \
    rm -rf $CONDA_DIR/share/jupyter/lab/staging && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    rm -rf /home/$NB_USER/.node-gyp

# Install facets which does not have a pip or conda package at the moment
RUN cd /tmp && \
    git clone https://github.com/PAIR-code/facets.git && \
    cd facets && \
    jupyter nbextension install facets-dist/ --sys-prefix && \
    cd && \
    rm -rf /tmp/facets
   
# Install torch with cuda 10.1 torch-ecosystem onnx tf keras torch2tensor
RUN conda install --quiet --yes pytorch torchvision cudatoolkit=10.1 -c pytorch \
    && \
    python3 -m pip install \
    	catalyst \
	albumentations \
	alchemy-catalyst \
	mxnet \
	efficientnet_pytorch \
	opencv-python \
	pycuda \
	onnx \
    	tensorflow \
	keras \
    #&& \
    #python3 -m pip install tensorflow==1.15.0 && python3 -m pip install tensorboard==2.2.1 && python3 -m pip install keras==2.3.1 \
    #&& \
    #git clone https://github.com/NVIDIA-AI-IOT/torch2trt && cd torch2trt && python setup.py install && cd .. && rm -rf torch2trt \
    #&& \
    #git clone https://github.com/onnx/onnx-tensorflow.git && cd onnx-tensorflow && python setup.py install && cd .. && rm -rf onnx-tensorflow \
    && \
    conda clean --all -f -y

# Install TensorRT
#COPY tensorrt /jupyter/tensorrt
#RUN dpkg -i tensorrt/nv-tensorrt-repo-ubuntu1804-cuda10.2-trt7.0.0.11-ga-20191216_1-1_amd64.deb && \
#    apt-key add /var/nv-tensorrt-repo-cuda10.2-trt7.0.0.11-ga-20191216/7fa2af80.pub && \
#    apt-get update && apt-get -y install tensorrt cuda-nvrtc-10-2 && apt-get install -y python3-libnvinfer-dev && apt-get install -y uff-converter-tf && \
#    pip install tensorrt/tensorrt-7.0.0.11-cp37-none-linux_x86_64.whl tensorrt/uff-0.6.5-py2.py3-none-any.whl tensorrt/graphsurgeon-0.4.1-py2.py3-none-any.whl && \
#    rm -rf tensorrt

# Update and Clean
RUN apt-get update && apt-get -y upgrade && rm -rf ~/.cache/* && apt-get -y clean && apt-get -y autoclean && apt-get -y autoremove

# SSH
RUN apt-get install -y openssh-server && \
	mkdir /var/run/sshd && \
	echo 'root:123456' | chpasswd && \
	sed -ri 's/^#?PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config && \
	sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config && \
	mkdir /root/.ssh && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

EXPOSE 8888-8892
EXPOSE 6006-6010
EXPOSE 22

# Configure container startup
ENTRYPOINT ["tini", "-g", "--"]
CMD ["bash", "-c", "source /etc/bash.bashrc && /usr/sbin/sshd && jupyter lab --notebook-dir=/jupyter --ip 0.0.0.0 --no-browser --allow-root"]
